// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TP4SCS.Library.Models.Data;

#nullable disable

namespace TP4SCS.Library.Migrations
{
    [DbContext(typeof(Tp4scsDevDatabaseContext))]
    [Migration("20241207214429_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedByOwnerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fcmtoken")
                        .HasColumnType("text")
                        .HasColumnName("FCMToken");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsGoogle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("Otp")
                        .HasColumnType("int")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpexpiredTime")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPExpiredTime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("RefreshExpireTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK__Account__3214EC07432AA34E");

                    b.HasIndex(new[] { "Phone" }, "UQ__Account__5C7E359E867FFAA9")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Account__A9D1053441E78E9A")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.AccountAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__AccountA__3214EC07F1AB69AD");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountAddress", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.AssetUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__AssetURL__3214EC079300F031");

                    b.HasIndex("BusinessId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("AssetURL", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BranchMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__BranchMa__3214EC07826EBA18");

                    b.HasIndex("BranchId");

                    b.HasIndex("MaterialId");

                    b.ToTable("BranchMaterial", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BranchService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__BranchSe__3214EC076E2D6363");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BranchService", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("CanceledAmount")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeIds")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FinishedAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeliverySupport")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PendingAmount")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingAmount")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07D57F3A3E");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessBranch", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CanceledAmount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime");

                    b.Property<int>("FinishedAmount")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitServiceNum")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaterialSupported")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("PendingAmount")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ProcessingAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<DateTime>("RegisteredTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ToTalServiceNum")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07867FFFE1");

                    b.HasIndex(new[] { "Phone" }, "UQ__Business__5C7E359EF99DD8E4")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ__Business__737584F6AB8F0142")
                        .IsUnique();

                    b.HasIndex(new[] { "OwnerId" }, "UQ__Business__819385B94C9A487C")
                        .IsUnique();

                    b.ToTable("BusinessProfile", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<bool>("IsMonth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYear")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(13, 1)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07A5B61348");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessStatistic", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Cart__3214EC07497D5439");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Cart__349DA5A74A52AEF9")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialIds")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__CartItem__3214EC071C7EB478");

                    b.HasIndex("BranchId");

                    b.HasIndex("CartId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAllowedUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidAsset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidContent")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK__Feedback__3214EC07D3BE5420");

                    b.HasIndex(new[] { "OrderItemId" }, "UQ__Feedback__57ED0680CDFC0A60")
                        .IsUnique();

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMonth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYear")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Leaderbo__3214EC0749455132");

                    b.ToTable("Leaderboard", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Material__3214EC078ADD480B");

                    b.HasIndex("ServiceId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbandonedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CanceledTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DeliveredFee")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAutoReject")
                        .HasColumnType("bit");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("PendingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcessingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RevievedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ShippingCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShippingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ShippingUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("StoragedTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Order__3214EC075B1C3E19");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialIds")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProcessState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__OrderDet__3214EC07A222FADE");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.OrderNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProviderNoti")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__OrderNot__3214EC07E13A036C");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNotification", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.PackSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__PackSubs__3214EC07D5F910FD");

                    b.HasIndex("BusinessId");

                    b.HasIndex("PackId");

                    b.ToTable("PackSubscription", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.PlatformPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Platform__3214EC0752FA7B57");

                    b.HasIndex(new[] { "Name" }, "UQ__Platform__737584F607299E8F")
                        .IsUnique();

                    b.ToTable("PlatformPack", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.PlatformStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<bool>("IsMonth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYear")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(13, 1)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Platform__3214EC07E138F06C");

                    b.ToTable("PlatformStatistic", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("SaleOff")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3214EC07AF1B7597");

                    b.HasIndex(new[] { "ServiceId" }, "UQ__Promotio__C51BB00B9D20E91A")
                        .IsUnique();

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackedNum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderedNum")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Service__3214EC0795A96F1F");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__ServiceC__3214EC0742A564FD");

                    b.HasIndex(new[] { "Name" }, "UQ__ServiceC__737584F6DD2EB64E")
                        .IsUnique();

                    b.ToTable("ServiceCategory", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.ServiceProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ServiceP__3214EC07DEB3D43A");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceProcess", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AutoClosedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsOwnerNoti")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentTicket")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentTicketId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__SupportT__3214EC07B02142A4");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTicket", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__TicketCa__3214EC07FEE4DE0C");

                    b.HasIndex(new[] { "Name" }, "UQ__TicketCa__737584F67C799691")
                        .IsUnique();

                    b.ToTable("TicketCategory", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC079D9F1F66");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.AccountAddress", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Account")
                        .WithMany("AccountAddresses")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__AccountAd__Accou__412EB0B6");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.AssetUrl", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessProfile", "Business")
                        .WithMany("AssetUrls")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK__AssetURL__Busine__0F624AF8");

                    b.HasOne("TP4SCS.Library.Models.Data.Feedback", "Feedback")
                        .WithMany("AssetUrls")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("FK__AssetURL__Feedba__10566F31");

                    b.HasOne("TP4SCS.Library.Models.Data.Material", "Material")
                        .WithMany("AssetUrls")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK__AssetURL__Materi__114A936A");

                    b.HasOne("TP4SCS.Library.Models.Data.OrderDetail", "OrderDetail")
                        .WithMany("AssetUrls")
                        .HasForeignKey("OrderDetailId")
                        .HasConstraintName("FK__AssetURL__OrderD__123EB7A3");

                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("AssetUrls")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__AssetURL__Servic__1332DBDC");

                    b.HasOne("TP4SCS.Library.Models.Data.SupportTicket", "Ticket")
                        .WithMany("AssetUrls")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__AssetURL__Ticket__14270015");

                    b.Navigation("Business");

                    b.Navigation("Feedback");

                    b.Navigation("Material");

                    b.Navigation("OrderDetail");

                    b.Navigation("Service");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BranchMaterial", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessBranch", "Branch")
                        .WithMany("BranchMaterials")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchMat__Branc__6477ECF3");

                    b.HasOne("TP4SCS.Library.Models.Data.Material", "Material")
                        .WithMany("BranchMaterials")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchMat__Mater__6383C8BA");

                    b.Navigation("Branch");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BranchService", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessBranch", "Branch")
                        .WithMany("BranchServices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchSer__Branc__5FB337D6");

                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("BranchServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchSer__Servi__5EBF139D");

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessBranch", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessProfile", "Business")
                        .WithMany("BusinessBranches")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessB__Busin__4BAC3F29");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessProfile", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Owner")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("TP4SCS.Library.Models.Data.BusinessProfile", "OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessP__Owner__47DBAE45");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessStatistic", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessProfile", "Business")
                        .WithMany("BusinessStatistics")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessS__Busin__282DF8C2");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Cart", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("TP4SCS.Library.Models.Data.Cart", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__AccountId__6D0D32F4");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.CartItem", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessBranch", "Branch")
                        .WithMany("CartItems")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItem__Branch__70DDC3D8");

                    b.HasOne("TP4SCS.Library.Models.Data.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItem__CartId__6FE99F9F");

                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("CartItems")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__CartItem__Servic__71D1E811");

                    b.Navigation("Branch");

                    b.Navigation("Cart");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Feedback", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.OrderDetail", "OrderItem")
                        .WithOne("Feedback")
                        .HasForeignKey("TP4SCS.Library.Models.Data.Feedback", "OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__OrderI__00200768");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Material", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("Materials")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Material__Servic__5AEE82B9");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Order", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__AccountId__75A278F5");

                    b.HasOne("TP4SCS.Library.Models.Data.AccountAddress", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__Order__AddressId__76969D2E");

                    b.Navigation("Account");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.OrderDetail", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessBranch", "Branch")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Branc__7A672E12");

                    b.HasOne("TP4SCS.Library.Models.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__797309D9");

                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__OrderDeta__Servi__7B5B524B");

                    b.Navigation("Branch");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.OrderNotification", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Order", "Order")
                        .WithMany("OrderNotifications")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderNoti__Order__245D67DE");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.PackSubscription", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.BusinessProfile", "Business")
                        .WithMany("PackSubscriptions")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK__PackSubsc__Busin__1BC821DD");

                    b.HasOne("TP4SCS.Library.Models.Data.PlatformPack", "Pack")
                        .WithMany("PackSubscriptions")
                        .HasForeignKey("PackId")
                        .IsRequired()
                        .HasConstraintName("FK__PackSubsc__PackI__1CBC4616");

                    b.Navigation("Business");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Promotion", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithOne("Promotion")
                        .HasForeignKey("TP4SCS.Library.Models.Data.Promotion", "ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Promotion__Servi__693CA210");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Service", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Service__Categor__534D60F1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.ServiceProcess", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Service", "Service")
                        .WithMany("ServiceProcesses")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__ServicePr__Servi__571DF1D5");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.SupportTicket", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.TicketCategory", "Category")
                        .WithMany("SupportTickets")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__SupportTi__Categ__0A9D95DB");

                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Moderator")
                        .WithMany("SupportTicketModerators")
                        .HasForeignKey("ModeratorId")
                        .HasConstraintName("FK__SupportTi__Moder__09A971A2");

                    b.HasOne("TP4SCS.Library.Models.Data.Order", "Order")
                        .WithMany("SupportTickets")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__SupportTi__Order__0B91BA14");

                    b.HasOne("TP4SCS.Library.Models.Data.Account", "User")
                        .WithMany("SupportTicketUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__SupportTi__UserI__08B54D69");

                    b.Navigation("Category");

                    b.Navigation("Moderator");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Transaction", b =>
                {
                    b.HasOne("TP4SCS.Library.Models.Data.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Accou__2180FB33");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Account", b =>
                {
                    b.Navigation("AccountAddresses");

                    b.Navigation("BusinessProfile");

                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("SupportTicketModerators");

                    b.Navigation("SupportTicketUsers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.AccountAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessBranch", b =>
                {
                    b.Navigation("BranchMaterials");

                    b.Navigation("BranchServices");

                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.BusinessProfile", b =>
                {
                    b.Navigation("AssetUrls");

                    b.Navigation("BusinessBranches");

                    b.Navigation("BusinessStatistics");

                    b.Navigation("PackSubscriptions");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Feedback", b =>
                {
                    b.Navigation("AssetUrls");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Material", b =>
                {
                    b.Navigation("AssetUrls");

                    b.Navigation("BranchMaterials");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderNotifications");

                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.OrderDetail", b =>
                {
                    b.Navigation("AssetUrls");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.PlatformPack", b =>
                {
                    b.Navigation("PackSubscriptions");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.Service", b =>
                {
                    b.Navigation("AssetUrls");

                    b.Navigation("BranchServices");

                    b.Navigation("CartItems");

                    b.Navigation("Materials");

                    b.Navigation("OrderDetails");

                    b.Navigation("Promotion");

                    b.Navigation("ServiceProcesses");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.SupportTicket", b =>
                {
                    b.Navigation("AssetUrls");
                });

            modelBuilder.Entity("TP4SCS.Library.Models.Data.TicketCategory", b =>
                {
                    b.Navigation("SupportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
